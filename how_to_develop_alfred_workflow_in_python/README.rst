怎样用 Python 开发 Alfred Workflow?
==============================================================================

Alfred Workflow 中有一个非常强大的模块: ``Inputs/Script Filter``. 这个模块可以接受 Alfred 搜索框中的 Keyword 以及搜索串, 然后使用编程语言来对其进行处理, 生成 Drop Down Menu (下拉列表) 中的 Item.

可以说如果你会用这个功能, 又懂得一门编程语言, 那么你几乎可以用 Alfred 做任何事.

Python 是通用编程语言中几乎是最简单的一种, 而且有无数强大的第三方库几乎可以让你做到任何事情. 所以用 Python 开发 Alfred Workflow 就是我们的上上之选了.

开源社区有一个包 ``Alfred-Workflow`` 能简化我们开发 Workfow: http://www.deanishe.net/alfred-workflow/index.html.

简单来说这个包就是定义了一个抽象的 ``Workflow`` 类, 然后定义了 ``Workflow.args`` 以接受搜索框中的字符, 然后用 ``Workflow.add_item(title, subtitle, arg, autocomplete)`` 来生成下拉列表中的内容.


开发过程中的那些坑
------------------------------------------------------------------------------

真正上手编写过的人都知道, 由于 Alfred 使用的是 MacOS 系统自带的 Python2, 并且所有的第三方包都装在插件目录下的 ``lib`` 文件夹中, 并且 `` ``Alfred-Workflow`` 也是放在插件目录下的.

**所以说我们的 IDLE 完全不起作用, 什么自动补全, 单元测试完全不能用. 而且我们只能通过 Alfred 搜索框来测试各种不同的输入, 测试起来简直是蛋疼**.


这篇文档能教会我什么?
------------------------------------------------------------------------------

- 如何配置你的开发环境, 目录. 让你像平时开发 Python 项目一样, 创建虚拟环境, 安装依赖库.
- 如何测试你的 Workflow, 如何定义所有可能的输入, 测试输出是否符合你所期待的那样子.
- 如何一键导出你的代码, 并打包生成一个 Workflow 插件.


下面, 我们就以 ``generate_password`` 为例, 开发一个生成随机密码的插件.
