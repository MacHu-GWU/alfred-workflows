<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>MacHu-GWU.google.another-google-suggest</string>
	<key>connections</key>
	<dict>
		<key>0C63B26C-777C-44FA-BA1A-8A996803A18E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>3F1F338D-8FAA-444A-B0D0-2B11C7361908</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Sanhe Hu</string>
	<key>description</key>
	<string>Get Google Search Suggestions</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Another Google Suggest</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>gg</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>2</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string># -*- coding: utf-8 -*-

import os
import sys
from workflow import Workflow, web
import xml.etree.ElementTree as ET

HOME = os.path.expanduser("~")
ICON = os.path.join(HOME, "Pictures", "icons", "google-logo.png")


class QueryExecutor(object):
    endpoint = "https://www.google.com/complete/search?output=toolbar&amp;q={query}"

    def __init__(self, query=""):
        self.query = query

    def encode_query(self, query):
        query = "+".join([s for s in query.split(" ") if s.strip()])
        return self.endpoint.format(query=query)

    def _encode_query(self):
        return self.encode_query(self.query)

    def parse_html(self, html):
        root = ET.fromstring(html)
        suggestion_list = list()
        for suggestion in root.iter("suggestion"):
            suggestion_list.append(suggestion.attrib["data"])
        return suggestion_list


qe = QueryExecutor()


def test():
    qe.query = "money order"
    url = qe._encode_query()
    response = web.get(url)
    suggestion_list = qe.parse_html(response.text)
    print(suggestion_list)


def main(wf):
    query = ""
    if len(wf.args):
        qe.query = wf.args[0]

    def get_data():
        url = qe._encode_query()
        response = web.get(url)
        return qe.parse_html(response.text)

    url = qe._encode_query()
    response = web.get(url)
    suggestion_list = qe.parse_html(response.text)
    # suggestion_list =  wf.cached_data("suggestion_list", get_data, max_age=1)

    for suggestion in suggestion_list:
        wf.add_item(
            title=suggestion,
            subtitle="Search Google For %s" % suggestion,
            arg=suggestion,
            valid=True,
        )
    wf.send_feedback()


if __name__ == "__main__":
    # test()
    wf = Workflow()
    logger = wf.logger
    sys.exit(wf.run(main))
</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string>main.py</string>
				<key>subtext</key>
				<string>Search Google with Suggestions</string>
				<key>title</key>
				<string>Search Google</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>0C63B26C-777C-44FA-BA1A-8A996803A18E</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>browser</key>
				<string></string>
				<key>searcher</key>
				<integer>1635215215</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.systemwebsearch</string>
			<key>uid</key>
			<string>3F1F338D-8FAA-444A-B0D0-2B11C7361908</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Alfred's Script Filter object is extremely powerful, and gives you control over the results displayed in Alfred.

Alfred 3 now supports JSON, which is the recommended format. XML is also supported for legacy Alfred 2 workflows, and has been updated to include the new features.

A new option now exists for Script Filters, "Alfred filters results". This allows you to return a whole list of results, let Alfred do the subsequent filtering with extreme performance. When this option is selected, your script will be called once with no argument.</string>
	<key>uidata</key>
	<dict>
		<key>0C63B26C-777C-44FA-BA1A-8A996803A18E</key>
		<dict>
			<key>xpos</key>
			<integer>90</integer>
			<key>ypos</key>
			<integer>60</integer>
		</dict>
		<key>3F1F338D-8FAA-444A-B0D0-2B11C7361908</key>
		<dict>
			<key>xpos</key>
			<integer>300</integer>
			<key>ypos</key>
			<integer>60</integer>
		</dict>
	</dict>
	<key>version</key>
	<string>1.0</string>
	<key>webaddress</key>
	<string>https://github.com/MacHu-GWU/alfred-workflows</string>
</dict>
</plist>
